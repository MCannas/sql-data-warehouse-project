Building GOLD LAYER
-Analysing: Explore & Understand the Business Objects.
-Coding: Data Integration 
	- Build the Business Objects.
	- Choose Type Dimention vs Facts).
	- Rename to friendly names.
Validating: Data Integration Checks.
docs & Version: Documenting Version in GIT.

RAW DATA --> DATA Modeling with a description of the relationship between the objects. 
A Logical Data Model contains three steps, the Conceptual Model, 

Continue 3:32:18
Theory
Star Schema vs. Snowflake Schema
Star Schema: Simple & Easy with Big Dimensions.
Snowflake Schema: More Complex with Large Datasets.

Dimension: Descriptive information that give context to your data (Who? What? Where?).
Fact: Quantitative information that represents events (How much? How many?).

Explore the Business Objects.


Draw the logical datamodel for the gold layer.
Red: PRODUCT business Object.
Green: CUSTOMER business Object.
PURPLE: SALES business Object.

Create Dimentions Customer
Gols Layer:

	Business-Ready data.
Objective
	Provide data to be consumed for reporting & Analytics.
Object Type
	Views.
Load Method
	None.
Data Transformation
	Data Integration.
	Data Aggregation.
	Business Logic & Rules.
Data Modeling
	Start Schema.
	Aggregated Objects.
	Flat Tables.
Target Audience
	Data Analysts.
	Business Users.
SQL-Script:

------------------------------------------------------
SELECT 
	   ci.cst_id
      ,ci.cst_key
      ,ci.cst_firstname
      ,ci.cst_lastname
      ,ci.cst_marital_status
      ,ci.cst_gndr
      ,ci.cst_create_date
	  ,ca.bdate
	  ,ca.gen
	  ,la.cntry
  FROM DataWarehouse.silver.crm_cust_info ci
  LEFT JOIN DataWarehouse.silver.erp_cust_az12 ca
  ON ci.cst_key = ca.cid
  LEFT JOIN DataWarehouse.silver.erp_loc_a101 la
  ON ci.cst_key = la.cid
-------------------------------------------------------------

TIP. After Joining table, check if any duplicates were introduced by the join logic.

SELECT cst_id, COUNT(*) FROM
(
SELECT 
	   ci.cst_id
      ,ci.cst_key
      ,ci.cst_firstname
      ,ci.cst_lastname
      ,ci.cst_marital_status
      ,ci.cst_gndr
      ,ci.cst_create_date
	  ,ca.bdate
	  ,ca.gen
	  ,la.cntry
  FROM DataWarehouse.silver.crm_cust_info ci
  LEFT JOIN DataWarehouse.silver.erp_cust_az12 ca
  ON ci.cst_key = ca.cid
  LEFT JOIN DataWarehouse.silver.erp_loc_a101 la
  ON ci.cst_key = la.cid
  )  t GROUP BY cst_id HAVING COUNT(*) > 1;

---------------------------------------------------------------------
--Create Dimentions Customer
--TIP. After Joining table, check if any duplicates were introduced by the join logic.

SELECT cst_id, COUNT(*) FROM
(
SELECT 
	   ci.cst_id
      ,ci.cst_key
      ,ci.cst_firstname
      ,ci.cst_lastname
      ,ci.cst_marital_status
      ,ci.cst_gndr
      ,ci.cst_create_date
	  ,ca.bdate
	  ,ca.gen
	  ,la.cntry
  FROM DataWarehouse.silver.crm_cust_info ci
  LEFT JOIN DataWarehouse.silver.erp_cust_az12 ca
  ON ci.cst_key = ca.cid
  LEFT JOIN DataWarehouse.silver.erp_loc_a101 la
  ON ci.cst_key = la.cid
  )  t GROUP BY cst_id HAVING COUNT(*) > 1;

--Result without a CASE-statement to Filter Integration Issues.
  SELECT 
	   ci.cst_id
      ,ci.cst_key
      ,ci.cst_firstname
      ,ci.cst_lastname
      ,ci.cst_marital_status
      ,ci.cst_gndr
      ,ci.cst_create_date
	  ,ca.bdate
	  ,ca.gen
	  ,la.cntry
  FROM DataWarehouse.silver.crm_cust_info ci
  LEFT JOIN DataWarehouse.silver.erp_cust_az12 ca
  ON ci.cst_key = ca.cid
  LEFT JOIN DataWarehouse.silver.erp_loc_a101 la
  ON ci.cst_key = la.cid;

--Integration issue between double fields from the tables.
--NULLs often come from joined tables!
--NULL will appear if SQL finds no match.
--Question. Which source is the master for these values?
--Answer. The Master Source of Customer is CRM!
SELECT DISTINCT
--ci.cst_key,ca.cid,
	   ci.cst_gndr
      ,ca.gen
	  ,CASE WHEN ci.cst_gndr != 'n/a' THEN ci.cst_gndr --CRM is the Master for gender Info
			ELSE COALESCE(ca.gen, 'n/a')
	   END AS new_gen
  FROM DataWarehouse.silver.crm_cust_info ci
  LEFT JOIN DataWarehouse.silver.erp_cust_az12 ca
  ON ci.cst_key = ca.cid
  LEFT JOIN DataWarehouse.silver.erp_loc_a101 la
  ON ci.cst_key = la.cid
  ORDER BY 1, 2;

--Result with a CASE-statement to Filter Integration Issues.
  SELECT 
	   ci.cst_id
      ,ci.cst_key
      ,ci.cst_firstname
      ,ci.cst_lastname
      ,ci.cst_marital_status
      ,CASE WHEN ci.cst_gndr != 'n/a' THEN ci.cst_gndr --CRM is the Master for gender Info
			ELSE COALESCE(ca.gen, 'n/a')
	   END AS new_gen
      ,ci.cst_create_date
	  ,ca.bdate
	  ,la.cntry
  FROM DataWarehouse.silver.crm_cust_info ci
  LEFT JOIN DataWarehouse.silver.erp_cust_az12 ca
  ON ci.cst_key = ca.cid
  LEFT JOIN DataWarehouse.silver.erp_loc_a101 la
  ON ci.cst_key = la.cid;

--ABC Rename columns to friendly, meaningfull names.
--General Principles
--.Naming Conventions: Use snake_case, with lowercase letters and underscores(_) to separate words.
--.Language: Use English for all names.
--.Avoid Reserved Words: Do not use SQL reserved words as object names.
--Sort the columns into logical groups to improve readability
  SELECT 
	   ci.cst_id AS customer_id
      ,ci.cst_key AS customer_number
      ,ci.cst_firstname AS first_name
      ,ci.cst_lastname AS last_name
	  ,la.cntry AS country
      ,ci.cst_marital_status AS marial_status
      ,CASE WHEN ci.cst_gndr != 'n/a' THEN ci.cst_gndr --CRM is the Master for gender Info
			ELSE COALESCE(ca.gen, 'n/a')
	   END AS gender
	  ,ca.bdate AS birth_date
      ,ci.cst_create_date AS create_date
  FROM DataWarehouse.silver.crm_cust_info ci
  LEFT JOIN DataWarehouse.silver.erp_cust_az12 ca
  ON ci.cst_key = ca.cid
  LEFT JOIN DataWarehouse.silver.erp_loc_a101 la
  ON ci.cst_key = la.cid;

--Dimention vs Fact???

--Surrogate Key.
--System-generated unique identifiers.
--DDL-based generation.
--Query-based using Windows function (Row_Number).
--Command: ROW_NUMBER() OVER (ORDER BY 'column_name') AS customer_key

SELECT
	   ROW_NUMBER() OVER (ORDER BY cst_id) AS customer_key
	  ,ci.cst_id AS customer_id
      ,ci.cst_key AS customer_number
      ,ci.cst_firstname AS first_name
      ,ci.cst_lastname AS last_name
	  ,la.cntry AS country
      ,ci.cst_marital_status AS marial_status
      ,CASE WHEN ci.cst_gndr != 'n/a' THEN ci.cst_gndr --CRM is the Master for gender Info
			ELSE COALESCE(ca.gen, 'n/a')
	   END AS gender
	  ,ca.bdate AS birth_date
      ,ci.cst_create_date AS create_date
  FROM DataWarehouse.silver.crm_cust_info ci
  LEFT JOIN DataWarehouse.silver.erp_cust_az12 ca
  ON ci.cst_key = ca.cid
  LEFT JOIN DataWarehouse.silver.erp_loc_a101 la
  ON ci.cst_key = la.cid;

--Create the Customers Object (View) as non persistent.
--CREATE VIEW 'object_name'.
--Note: The CREATE VIEW ''object' needs a separate script to execute!

--use master;
--GO;
--USE DataWarehouse;
--GO;

CREATE VIEW datawarehouse.gold.dim_customers AS
SELECT ROW_NUMBER() OVER (ORDER BY cst_id) AS customer_key
	  ,ci.cst_id AS customer_id
      ,ci.cst_key AS customer_number
      ,ci.cst_firstname AS first_name
      ,ci.cst_lastname AS last_name
	  ,la.cntry AS country
      ,ci.cst_marital_status AS marial_status
      ,CASE WHEN ci.cst_gndr != 'n/a' THEN ci.cst_gndr --CRM is the Master for gender Info
			ELSE COALESCE(ca.gen, 'n/a')
	   END AS gender
	  ,ca.bdate AS birth_date
      ,ci.cst_create_date AS create_date
  FROM DataWarehouse.silver.crm_cust_info ci
  LEFT JOIN DataWarehouse.silver.erp_cust_az12 ca
  ON ci.cst_key = ca.cid
  LEFT JOIN DataWarehouse.silver.erp_loc_a101 la
  ON ci.cst_key = la.cid;

--Code Review by Google Gemini.

CREATE VIEW datawarehouse.gold.dim_customers AS
SELECT
    ROW_NUMBER() OVER (ORDER BY ci.cst_id) AS customer_key
  , ci.cst_id AS customer_id
  , ci.cst_key AS customer_number
  , ci.cst_firstname AS first_name
  , ci.cst_lastname AS last_name
  , la.cntry AS country
  , ci.cst_marital_status AS marital_status -- Corrected typo
  , CASE
        WHEN ci.cst_gndr IS NOT NULL AND ci.cst_gndr != 'n/a' THEN ci.cst_gndr -- Handles 'n/a' and NULL from CRM
        WHEN ca.gen IS NOT NULL AND ca.gen != 'n/a' THEN ca.gen -- Handles 'n/a' and NULL from ERP
        ELSE 'n/a'
    END AS gender
  , ca.bdate AS birth_date
  , ci.cst_create_date AS create_date
FROM DataWarehouse.silver.crm_cust_info ci
LEFT JOIN DataWarehouse.silver.erp_cust_az12 ca
    ON ci.cst_key = ca.cid
LEFT JOIN DataWarehouse.silver.erp_loc_a101 la
    ON ci.cst_key = la.cid;

--Quality Check of the Gold Table.
SELECT * FROM gold.dim_customers;
SELECT DISTINCT gender FROM gold.dim_customers;

