

--Load all data into the Silver Tables with a Stored Procedure.
--Steps 1: Each Table Needs First to be Emptied with the TRUNCATE Command.
--Steps 1: Each Table needs te be Loaded with Data from the Bronze Layer.
--Step 3: Run the EXEC Command to execute the Stored Procedure.
--Result: Mass Data load.

--use master;
--GO;
--USE DataWarehouse;
--GO;

--Create the Stored Procedure:
--Result: The procedure is created in the database.

CREATE OR ALTER PROCEDURE silver.load_silver AS

BEGIN

-- 1
TRUNCATE TABLE silver.crm_cust_info;

INSERT INTO silver.crm_cust_info
(
	cst_id,
	cst_key,
	cst_firstname,
	cst_lastname,
	cst_marital_status,
	cst_gndr,
	cst_create_date
)
SELECT
	  cst_id
     ,cst_key
     ,TRIM(cst_firstname) AS cst_firstname
     ,TRIM(cst_lastname) AS cst_lastname
	 ,CASE WHEN UPPER(TRIM(cst_marital_status)) = 'S' THEN 'Single'
           WHEN UPPER(TRIM(cst_marital_status)) = 'M' THEN 'Maried'
	  ELSE 'n/a'
	  END cst_marital_status
     ,CASE WHEN UPPER(TRIM(cst_gndr)) = 'F' THEN 'Female'
           WHEN UPPER(TRIM(cst_gndr)) = 'M' THEN 'Male'
	  ELSE 'n/a'
	  END cst_gndr
     ,cst_create_date
FROM (
SELECT
*,
ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC) as flag_last
FROM bronze.crm_cust_info
)t WHERE flag_last = 1;

--2
TRUNCATE TABLE silver.crm_prd_info;

INSERT INTO silver.crm_prd_info(
  prd_id,
  cat_id,
  prd_key,
  prd_nm,
  prd_cost,
  prd_line,
  prd_start_dt,
  prd_end_dt)
SELECT
	prd_id,
	REPLACE(SUBSTRING(prd_key,1,5), '-', '_') AS cat_id, -- Extract category ID
	SUBSTRING(prd_key,7,LEN(prd_key)) AS prd_key,		 -- Extract product key
	TRIM(prd_nm),
	ISNULL(prd_cost,0) AS prd_cost, -- Replace none existing values by 0
	CASE UPPER(TRIM(prd_line)) -- Data normalization
		WHEN 'M' THEN 'Mountain' 
		WHEN 'R' THEN 'Road'
		WHEN 'S' THEN 'Other Sales'
		WHEN 'T' THEN 'Touring'
	ELSE 'n/a' --Instead of none existing data n/a "not available"
	END AS prd_line,
	CAST (prd_start_dt AS DATE) AS prd_start_dt, -- Convert data type to another data type 
	CAST (LEAD(prd_start_dt) OVER (PARTITION BY prd_key ORDER BY prd_start_dt) - 1 AS DATE) AS prd_end_dt -- Convert data type by enrichment
FROM bronze.crm_prd_info;

-- 3
TRUNCATE TABLE silver.crm_sales_details;

INSERT INTO silver.crm_sales_details(
	sls_ord_num
    ,sls_prd_key
    ,sls_cust_id
    ,sls_order_dt
    ,sls_ship_dt
    ,sls_due_dt
    ,sls_sales
    ,sls_quantity
    ,sls_price)
SELECT DISTINCT
	sls_ord_num
    ,sls_prd_key
    ,sls_cust_id
   ,CASE WHEN sls_order_dt = 0 OR LEN(sls_order_dt) != 8 THEN NULL
		 ELSE CAST(CAST(sls_order_dt AS VARCHAR) AS DATE)
	END AS sls_order_dt
   ,CASE WHEN sls_ship_dt = 0 OR LEN(sls_ship_dt) != 8 THEN NULL
		 ELSE CAST(CAST(sls_ship_dt AS VARCHAR) AS DATE)
	END AS sls_ship_dt
   ,CASE WHEN sls_due_dt = 0 OR LEN(sls_due_dt) != 8 THEN NULL
		 ELSE CAST(CAST(sls_due_dt AS VARCHAR) AS DATE)
	END AS sls_due_dt
   ,CASE WHEN sls_sales <= 0
			 OR sls_sales != sls_quantity * ABS(sls_price) 
             OR sls_sales IS NULL
	THEN   sls_quantity * ABS(sls_price) 
	ELSE sls_sales
	END AS sls_sales
  ,CASE WHEN sls_price <= 0
		 OR sls_price IS NULL
	THEN sls_sales / NULLIF(sls_quantity,0)
	ELSE sls_price
	END AS sls_price
  ,CASE WHEN sls_quantity <= 0
		  OR sls_quantity IS NULL
	THEN   sls_sales / ABS(sls_price)
	ELSE sls_quantity
	END AS sls_quantity
FROM bronze.crm_sales_details;

-- 4
TRUNCATE TABLE silver.erp_cust_az12;

INSERT INTO silver.erp_cust_az12
(cid,bdate,gen)
SELECT
   CASE WHEN cid LIKE 'NAS%' THEN SUBSTRING(cid, 4, LEN(cid) - 3) 
		ELSE cid
   END AS cid
   ,CASE WHEN bdate > GETDATE() THEN NULL
		 ELSE bdate
	END AS bdata
   ,CASE  
		WHEN UPPER(TRIM(gen)) IN ('M','Male') THEN 'Male' 
		WHEN UPPER(TRIM(gen)) IN ('F','Female') THEN 'Female'
	ELSE 'n/a'
	END AS gen
FROM bronze.erp_cust_az12;

-- 5
TRUNCATE TABLE silver.erp_loc_a101;

INSERT INTO silver.erp_loc_a101(cid,cntry)
SELECT 
	REPLACE(cid, '-', '') AS cid
   ,CASE  
		WHEN UPPER(TRIM(cntry)) IN ('DE') THEN 'Germany' 
		WHEN UPPER(TRIM(cntry)) IN ('US','USA') THEN 'United States'
		WHEN UPPER(TRIM(cntry)) IN ('') OR cntry IS NULL THEN 'n/a'
	ELSE TRIM(cntry)
	END AS cntry
FROM bronze.erp_loc_a101;

-- 6

--Load the Data Into the Silver Layer Table.
--Result: Full load.

TRUNCATE TABLE silver.erp_px_cat_g1v2;

INSERT INTO silver.erp_px_cat_g1v2 (id,cat,subcat,maintenance)
SELECT
	 TRIM(id)
	,TRIM(cat)
	,TRIM(subcat)
	,TRIM(maintenance)
FROM bronze.erp_px_cat_g1v2;
END;

--Execute the Stored Procedure.

EXEC silver.load_silver;
