use master;
--GO;
USE DataWarehouse;
--GO;




-- Silver Layzer Table Check: crm_cust_info

--Check For Nulls or Duplicates in the Primary Key
--Expectation: No Result 
SELECT * FROM silver.crm_cust_info

SELECT *
FROM silver.crm_cust_info
WHERE cst_id = 29449;

SELECT cst_id, count(*)
FROM silver.crm_cust_info
GROUP BY cst_id
HAVING COUNT(*) > 1 OR cst_id IS NULL;

--Use: ROW_NUMBER()
--Assigns a unique number to each row in a result set, based on a defined order.

SELECT
*,
ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC) as flag_last
FROM silver.crm_cust_info
WHERE cst_id = 29466;

-- Also Without a WHERE Clause
SELECT
*,
ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC) as flag_last
FROM silver.crm_cust_info

--With Only the InCorrect Row(s) Returned.
SELECT
*
FROM (
SELECT
*,
ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC) as flag_last
FROM silver.crm_cust_info
)t WHERE flag_last != 1;

--With Only the Correct Row(s) Returned.
SELECT
*
FROM (
SELECT
*,
ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC) as flag_last
FROM silver.crm_cust_info
)t WHERE flag_last = 1; -- AND cst_id = 29466

--Check For Nulls or Duplicates in the Primary Key
--Expectation: No Result 
SELECT * FROM silver.crm_cust_info

SELECT *
FROM silver.crm_cust_info
WHERE cst_id = 29466;

SELECT cst_id, count(*)
FROM silver.crm_cust_info
GROUP BY cst_id
HAVING COUNT(*) > 1 OR cst_id IS NULL;

--Use: ROW_NUMBER()
--Assigns a unique number to each row in a result set, based on a defined order.

SELECT
*,
ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC) as flag_last
FROM silver.crm_cust_info
WHERE cst_id = 29466;

-- Also Without a WHERE Clause
SELECT
*,
ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC) as flag_last
FROM silver.crm_cust_info

--With Only the InCorrect Row(s) Returned.
SELECT
*
FROM (
SELECT
*,
ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC) as flag_last
FROM silver.crm_cust_info
)t WHERE flag_last != 1;

--With Only the Correct Row(s) Returned.
SELECT
*
FROM (
SELECT
*,
ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC) as flag_last
FROM silver.crm_cust_info
)t WHERE flag_last = 1; -- AND cst_id = 29466

-- Quality Check
--Check for unwanted Spaces in String Values
--Expectation: No Result

--Without a Filter
--Check first Name
SELECT cst_firstname FROM silver.crm_cust_info

--Remove the unwanted Spaces at Query
--TRIM command to remove the leading & ending spaces of a String value.
--If the original value is not equal to the same value after trimming, it means there are spaces!
SELECT cst_firstname FROM silver.crm_cust_info
WHERE cst_firstname != TRIM(cst_firstname)

--Sum the Values with Spaces.
SELECT count(cst_firstname) FROM silver.crm_cust_info
WHERE cst_firstname != TRIM(cst_firstname)

--Check last Name
SELECT cst_lastname FROM silver.crm_cust_info
WHERE cst_lastname != TRIM(cst_lastname)

--Check the Gender
SELECT cst_gndr FROM silver.crm_cust_info
WHERE cst_gndr!= TRIM(cst_gndr)

-- Quality Check
-- Check for unwanted spaces in string values and remove those spaces.
SELECT
   *  
FROM (
SELECT
*,
ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC) as flag_last
FROM silver.crm_cust_info
)t WHERE flag_last = 1; -- AND cst_id = 29466;


--Clean All the Columns with a Value Space Error
--With Only the Correct Row(s) Returned.
SELECT
	cst_id
     ,cst_key
     ,TRIM(cst_firstname) AS cst_firstname
     ,TRIM(cst_lastname) AS cst_lastname
     ,cst_material_status
     ,TRIM(cst_gndr) AS cst_gndr
     ,cst_create_date
FROM (
SELECT
*,
ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC) as flag_last
FROM silver.crm_cust_info
)t WHERE flag_last = 1; -- AND cst_id = 29466

-- Quality Check
-- Check the consistency of values in low cardinality columns.

-- Quality Check
-- Check the consistency of values in low cardinality columns.

-- Data Standardization & Consistency.

SELECT DISTINCT cst_gndr
FROM silver.crm_cust_info

-- Transform the data output
-- In our data warehouse, we aim to store clear and meaningful values rather than using abbreviated terms.
-- In our data warehouse we use the default value 'n/a' for missing values!
-- Apply UPPER() just in case mixed-case values appear later in your column.
-- Apply TRIM to remove unwanted empty spaces just in case spaces appear later in your column.


-- Write the insert statement to transfer the data to the silver layer.
INSERT INTO silver.crm_cust_info
(
	cst_id,
	cst_key,
	cst_firstname,
	cst_lastname,
	cst_marital_status,
	cst_gndr,
	cst_create_date
)
SELECT
	  cst_id
     ,cst_key
     ,TRIM(cst_firstname) AS cst_firstname
     ,TRIM(cst_lastname) AS cst_lastname
	 ,CASE WHEN UPPER(TRIM(cst_marital_status)) = 'S' THEN 'Single'
           WHEN UPPER(TRIM(cst_marital_status)) = 'M' THEN 'Maried'
	  ELSE 'n/a'
	  END cst_marital_status
     ,CASE WHEN UPPER(TRIM(cst_gndr)) = 'F' THEN 'Female'
           WHEN UPPER(TRIM(cst_gndr)) = 'M' THEN 'Male'
	  ELSE 'n/a'
	  END cst_gndr
     ,cst_create_date
FROM (
SELECT
*,
ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC) as flag_last
FROM silver.crm_cust_info
)t WHERE flag_last = 1; -- AND cst_id = 29466

